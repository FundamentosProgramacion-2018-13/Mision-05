# Autor: Luisa Fernanda Arellano Alvarado
# Cuadrados con circulos

#Luisa Fernanda Arellano Alvarado 
import  pygame  #Librería de pygame

# Dimensiones de la pantalla
ANCHO = 640
ALTO = 480
# Colores
BLANCO = (255, 255, 255)  # R,G,B en el rango [0,255], 0 ausencia de color, 255 toda la intensidad
VERDE_BANDERA = (27, 94, 32)  # un poco de rojo, más de verde, un poco de azul
ROJO = (255, 0, 0)  # solo rojo, nada de verde, nada de azul
AZUL = (0, 0, 255)  # nada de rojo, ni verde, solo azul


def dibujarCirculo(ventana):
    for radio in range(10,ALTO//2+1,10):
        pygame.draw.circle(ventana,AZUL,(ANCHO//2,ALTO//2),radio,1)


def dibujarCuadros(ventana):
    for x in range(10, ALTO//2, 10):
        pygame.draw.rect(ventana,BLANCO, (ANCHO//2 - l, ALTO//2 - l, l*2,l*2), 1)


def dibujar():
    # Inicializa el motor de pygame
    pygame.init()
    # Crea una ventana de ANCHO x ALTO
    ventana = pygame.display.set_mode((ANCHO, ALTO))  # Crea la ventana donde dibujará
    reloj = pygame.time.Clock()  # Para limitar los fps
    termina = False  # Bandera para saber si termina la ejecución, iniciamos suponiendo que no

    while not termina:  # Ciclo principal, MIENTRAS la variabel termina sea False, el ciclo se repite automáticamente
        # Procesa los eventos que recibe
        for evento in pygame.event.get():
            if evento.type == pygame.QUIT:  # El usuario hizo click en el botón de salir
                termina = True  # Queremos terminar el ciclo

        #Borrar pantalla
        ventana.fill(BLANCO)

        dibujarCirculo(ventana)
        dibujarCuadrados(ventana)

        pygame.display.flip()  # Actualiza trazos (Si no llamas a esta función, no se dibuja)
        reloj.tick(40)  # 40 fps

    # Después del ciclo principal
    pygame.quit()  # termina pygame


# Función principal, aquí resuelves el problema
def main():
    dibujar()  # Por ahora, solo dibuja


# Llamas a la función principal
main()
