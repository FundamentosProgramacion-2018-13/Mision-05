#encoding: UTF-8
#Autor: Alek Howland, A01747765
#Descripción: Uso de ciclos for para generar patrones y valores. Con un menu de seleccion usando ciclo while


import pygame
import random
import math

# Dimensiones de la pantalla
ANCHO = 800
ALTO =  800
# Colores
BLANCO = (255, 255, 255)  # R,G,B en el rango [0,255], 0 ausencia de color, 255 toda la intensidad
VERDE_BANDERA = (27, 94, 32)    # un poco de rojo, más de verde, un poco de azul
ROJO = (255, 0, 0)      # solo rojo, nada de verde, nada de azul
AZUL = (0, 0, 255)      # nada de rojo, ni verde, solo azul
NEGRO = (0,0,0)


#Se despliega el menu de seleccion
def leerOpcionMenu():
    print("Misión 5. Seleccione que quiere hacer.")
    print("1. Dibujar cuadros y círculos")
    print("2. Dibujar parábolas")
    print("3. Dibujar espiral")
    print("4. Dibujar círculos")
    print("5. Aproximar PI")
    print("6. Contar divisibles entre 19")
    print("7. Imprimir pirámides de números")
    print("0. Salir")

    opcion = int(input("¿Qué desea hacer? "))

    return opcion


#Dibuja cuadros y circulos
# Estructura básica de un programa que usa pygame para dibujar
def dibujarFig1():
    # Inicializa el motor de pygame
    pygame.init()
    # Crea una ventana de ANCHO x ALTO
    ventana = pygame.display.set_mode((ANCHO, ALTO))  # Crea la ventana donde dibujará
    reloj = pygame.time.Clock()  # Para limitar los fps
    termina = False  # Bandera para saber si termina la ejecución, iniciamos suponiendo que no

    while not termina:  # Ciclo principal, MIENTRAS la variable termina sea False, el ciclo se repite automáticamente
        # Procesa los eventos que recibe
        for evento in pygame.event.get():
            if evento.type == pygame.QUIT:  # El usuario hizo click en el botón de salir
                termina = True      # Queremos terminar el ciclo

        # Borrar pantalla
        ventana.fill(BLANCO)

        # Dibujar, aquí haces todos los trazos que requieras

        for x in range(1, 400, 10):  # Se define el rango de valores numericos que se manejaran
            pygame.draw.rect(ventana, NEGRO, (ANCHO // 2 - x, ALTO // 2 - x, x * 2, x * 2), 1)  # Se dibuja
            pygame.draw.circle(ventana, NEGRO, (ANCHO // 2, ALTO // 2), x, 1)


        pygame.display.flip()  # Actualiza trazos (Si no llamas a esta función, no se dibuja)
        reloj.tick(10)  # 40 fps

    # Después del ciclo principal
    pygame.quit()  # termina pygame


#Funcion que genera color aleatorio
def generarColor():
    cR = random.randint(0,255), random.randint(0,255), random.randint(0,255)
    return cR


#Dibuja parábola
# Estructura básica de un programa que usa pygame para dibujar
def dibujarFig2():
    # Inicializa el motor de pygame
    pygame.init()
    # Crea una ventana de ANCHO x ALTO
    ventana = pygame.display.set_mode((ANCHO, ALTO))  # Crea la ventana donde dibujará
    reloj = pygame.time.Clock()  # Para limitar los fps
    termina = False  # Bandera para saber si termina la ejecución, iniciamos suponiendo que no

    while not termina:  # Ciclo principal, MIENTRAS la variable termina sea False, el ciclo se repite automáticamente
        # Procesa los eventos que recibe
        for evento in pygame.event.get():
            if evento.type == pygame.QUIT:  # El usuario hizo click en el botón de salir
                termina = True  # Queremos terminar el ciclo

        # Borrar pantalla
        ventana.fill(BLANCO)

        # Dibujar, aquí haces todos los trazos que requieras

        for x in range(40):
            x = (x + 1) * 10
            pygame.draw.line(ventana, generarColor(), (400 - x, 400), (400, x), 1)
            pygame.draw.line(ventana, generarColor(), (400 + x, 400), (400, x), 1)
            pygame.draw.line(ventana, generarColor(), (400 + x, 400), (400, 800 - x), 1)
            pygame.draw.line(ventana, generarColor(), (400 - x, 400), (400, 800 - x), 1)

        pygame.display.flip()  # Actualiza trazos (Si no llamas a esta función, no se dibuja)
        reloj.tick(10)  # 40 fps

    # Después del ciclo principal
    pygame.quit()  # termina pygame


#Dibuja espiral
# Estructura básica de un programa que usa pygame para dibujar
def dibujarFig3():
    # Inicializa el motor de pygame
    pygame.init()
    # Crea una ventana de ANCHO x ALTO
    ventana = pygame.display.set_mode((ANCHO, ALTO))  # Crea la ventana donde dibujará
    reloj = pygame.time.Clock()  # Para limitar los fps
    termina = False  # Bandera para saber si termina la ejecución, iniciamos suponiendo que no

    while not termina:  # Ciclo principal, MIENTRAS la variable termina sea False, el ciclo se repite automáticamente
        # Procesa los eventos que recibe
        for evento in pygame.event.get():
            if evento.type == pygame.QUIT:  # El usuario hizo click en el botón de salir
                termina = True  # Queremos terminar el ciclo

        # Borrar pantalla
        ventana.fill(BLANCO)

        # Dibujar, aquí haces todos los trazos que requieras

        for x in range(0, 800 + 1, 10):
            if x < 400:
                pygame.draw.line(ventana, NEGRO, (800 - x, 800 - x), (0 + x, 800 - x), 1)
        for x in range(0, 800 + 1, 10):
            if x < 400:
                pygame.draw.line(ventana, NEGRO, (0 + x, 800 - x), (0 + x, x), 1)
        for x in range(0, 800 + 1, 10):
            if x > 400:
                pygame.draw.line(ventana, NEGRO, (800 - x, 800 - x), (x - 10, 800 - x), 1)
        for x in range(0, 800 + 1, 10):
            if x > 400:
                pygame.draw.line(ventana, NEGRO, (0 + x - 10, 800 - x), (0 + x - 10, x - 10), 1)
        pygame.draw.line(ventana, NEGRO, (790, 0), (790, 789), 1)
        pygame.draw.line(ventana, NEGRO, (0, 0), (0, 800), 1)
        pygame.draw.line(ventana, NEGRO, (0, 0), (800, 0), 1)
        pygame.draw.line(ventana, NEGRO, (400, 400), (397, 400), 1)

        pygame.display.flip()  # Actualiza trazos (Si no llamas a esta función, no se dibuja)
        reloj.tick(10)  # 40 fps

    # Después del ciclo principal
    pygame.quit()  # termina pygame


#Dibuja circulos
# Estructura básica de un programa que usa pygame para dibujar
def dibujarFig4():
    # Inicializa el motor de pygame
    pygame.init()
    # Crea una ventana de ANCHO x ALTO
    ventana = pygame.display.set_mode((ANCHO, ALTO))  # Crea la ventana donde dibujará
    reloj = pygame.time.Clock()  # Para limitar los fps
    termina = False  # Bandera para saber si termina la ejecución, iniciamos suponiendo que no

    while not termina:  # Ciclo principal, MIENTRAS la variable termina sea False, el ciclo se repite automáticamente
        # Procesa los eventos que recibe
        for evento in pygame.event.get():
            if evento.type == pygame.QUIT:  # El usuario hizo click en el botón de salir
                termina = True  # Queremos terminar el ciclo

        # Borrar pantalla
        ventana.fill(BLANCO)

        # Dibujar, aquí haces todos los trazos que requieras

        for x in range(0,361,30):
          radianes = math.radians(x)
          pygame.draw.circle(ventana, NEGRO, (400+int(150*math.cos(radianes)),400-int(150*math.sin(radianes))),150,1)

        pygame.display.flip()  # Actualiza trazos (Si no llamas a esta función, no se dibuja)
        reloj.tick(10)  # 40 fps

    # Después del ciclo principal
    pygame.quit()  # termina pygame


#Función que aproxima el valor de pi
def aproximarPI(terminos):
    suma = 0  # ACUMULADOR
    for n in range(1, terminos + 1):
        suma += 1 / (n ** 4)  # suma = suma + 1/n**2

    ap = (suma*90)**0.25

    return ap


#Función que calcula los numeros divisibles entre 19 en valores de 3 digitos
def calcularDiv3():
    contador = 0
    for x in range (100,999+1):
        if x%19==0:
            contador += 1
        else:
            pass

    return contador


#Función que imprime pirámides de números
def definirPiramides():
    num = 0
    for x in range(1,10):
        num = num*10+x
        r = num*8+x
        print(num, "*8 +", x, "=", r)

    print()

    num2 = 0
    for n in range(1,10):
        num2 = num2*10+1
        r2 = num2**2
        print(num2, "*", num2, "=", r2)


#Función principal
def main():
    opcion = leerOpcionMenu()
    while opcion != 0:
        if opcion == 1:
            dibujarFig1()
            opcion = leerOpcionMenu()
        elif opcion == 2:
            dibujarFig2()
            opcion = leerOpcionMenu()
        elif opcion == 3:
            dibujarFig3()
            opcion = leerOpcionMenu()
        elif opcion == 4:
            dibujarFig4()
            opcion = leerOpcionMenu()
        elif opcion == 5:
            terminos = int(input("Número de términos: "))
            print(aproximarPI(terminos))
            opcion = leerOpcionMenu()
        elif opcion == 6:
            print(calcularDiv3())
            opcion = leerOpcionMenu()
        elif opcion == 7:
            definirPiramides()
            opcion = leerOpcionMenu()

    print()
    print("Termina programa")

main()
